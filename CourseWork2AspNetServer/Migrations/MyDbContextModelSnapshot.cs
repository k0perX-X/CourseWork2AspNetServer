// <auto-generated />
using System;
using CourseWork2AspNetServer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourseWork2AspNetServer.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseWork2AspNetServer.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.DoctorsAppointment", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<double?>("PatientTemperature")
                        .HasColumnType("double precision");

                    b.Property<bool>("Visited")
                        .HasColumnType("boolean");

                    b.HasKey("PatientId", "DoctorId", "DateTime");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsAppointments");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExplorationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.OAuth", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Token");

                    b.HasIndex("PatientId");

                    b.ToTable("OAuths");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.PatientProcedure", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool>("Visited")
                        .HasColumnType("boolean");

                    b.HasKey("PatientId", "ProcedureId", "DateTime");

                    b.HasIndex("ProcedureId");

                    b.ToTable("PatientProcedures");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.PatientsDrug", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.HasKey("PatientId", "DrugId", "DateOfManufacture");

                    b.HasIndex("DrugId");

                    b.ToTable("PatientsDrugs");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.PrescribedMedication", b =>
                {
                    b.Property<int>("DoctorsAppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DoctorsAppointmentDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoctorsAppointmentDoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorsAppointmentPatientId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool>("ReceptionTimeDuringTheDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceptionTimeInTheEvening")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceptionTimeInTheMorning")
                        .HasColumnType("boolean");

                    b.Property<bool>("TakeAfterMeals")
                        .HasColumnType("boolean");

                    b.Property<bool>("TakeBeforeMeals")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TakeMedicineBeforeTheDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TakeWithMeals")
                        .HasColumnType("boolean");

                    b.HasKey("DoctorsAppointmentId", "DrugId");

                    b.HasIndex("DrugId");

                    b.HasIndex("DoctorsAppointmentPatientId", "DoctorsAppointmentDoctorId", "DoctorsAppointmentDateTime");

                    b.ToTable("PrescribedMedications");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.TakenMedication", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("ReceptionTimeDuringTheDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceptionTimeInTheEvening")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceptionTimeInTheMorning")
                        .HasColumnType("boolean");

                    b.HasKey("PatientId", "DrugId", "DateTime");

                    b.HasIndex("DrugId");

                    b.ToTable("TakenMedications");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.WellBeingRecord", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.HasKey("PatientId", "DateTime");

                    b.ToTable("WellBeingRecords");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.DoctorsAppointment", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseWork2AspNetServer.Models.Patient", "Patient")
                        .WithMany("DoctorsAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.OAuth", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Patient", null)
                        .WithMany("Tokens")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.PatientProcedure", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseWork2AspNetServer.Models.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.PatientsDrug", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseWork2AspNetServer.Models.Patient", "Patient")
                        .WithMany("PatientsDrugs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.PrescribedMedication", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseWork2AspNetServer.Models.DoctorsAppointment", "DoctorsAppointment")
                        .WithMany("PrescribedMedications")
                        .HasForeignKey("DoctorsAppointmentPatientId", "DoctorsAppointmentDoctorId", "DoctorsAppointmentDateTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorsAppointment");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.Procedure", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Patient", null)
                        .WithMany("Procedures")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.TakenMedication", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseWork2AspNetServer.Models.Patient", "Patient")
                        .WithMany("TakenMedications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.WellBeingRecord", b =>
                {
                    b.HasOne("CourseWork2AspNetServer.Models.Patient", "Patient")
                        .WithMany("WellBeingRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.DoctorsAppointment", b =>
                {
                    b.Navigation("PrescribedMedications");
                });

            modelBuilder.Entity("CourseWork2AspNetServer.Models.Patient", b =>
                {
                    b.Navigation("DoctorsAppointments");

                    b.Navigation("PatientsDrugs");

                    b.Navigation("Procedures");

                    b.Navigation("TakenMedications");

                    b.Navigation("Tokens");

                    b.Navigation("WellBeingRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
